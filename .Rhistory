devtools::document()
devtools::document()
devtools::document()
estimate_area()
?estimate_area
installed.packages("pgghw4g6")
installed.packages("pkghw4g6")
install.packages("pkghw4g6")
install.packages("pkghw4g6")
library(pkghw4g6)
rval
estimate_area <- function(B = 5000, seed = 10){
# Control seed
set.seed(seed)
# Simulate B points
points <- data.frame(
x = runif(n = B, min = 0, max = 1),
y = runif(n = B, min = 0, max = 1),
inside = rep(NA,B)
)
# Create a vector Z and a loop
Z <- logical()
for (i in 1:nrow(points)){
x <- points[i,1]
y <- points[i,2]
if (x^2 + y^2 > 0.5^2 & (x-0.5)^2 +(y-0.5)^2 < 0.5^2 &  y > x - 0.5 ){
Z[i] =  1  # true if a data point lies in the shape
points[i,3] = TRUE
}else{
Z[i] = 0  # false if data points doesn't lie in the shape
points[i,3] = FALSE
}
}
# Compute area of shape
area_square <- 1*1
estimated_area <- area_square * (sum(Z)/B)
# Create a structure with class "area"
rval <- structure(
list(
estimated_area = estimated_area,
points = points),
class = "area"
)
# typeof(rval) # list
return(rval)
}
#' @title Plotting of a shape area function
#' @author Virany Kho, Colin Steffe, Guillaume Bilocq, Daniel Welz and Jasmine Mawjee
#' @description Plots the area of a shape S by simulating random coordinates in a one by one square.
#' @param x The return value from the estimation of the area of the shape function.
#' @return Plot of the shape S and the simulated data points (within the shape and outside the shape).
#' @examples
#' plot.area(0.5672)
#' @export
# Function that plots the shape
plot.area <- function(x) {   # x is rval
x <- estimate_area()
points <- x[["points"]]
# plot points
library(ggplot2)
plot <- ggplot(data = points) +
geom_point(mapping = aes(x = points[,1],
y = points[,2]),
alpha = 0.2) +
theme_bw() +
theme(panel.grid = element_line(linetype = "dashed",
color = "grey")) +
# Rename axes
xlab("x") +
ylab("y") +
# Plot frame around points
geom_hline(yintercept = c(0, 1),
linetype = "dashed",
color = "blue") +
geom_vline(xintercept = c(0, 1),
linetype = "dashed",
color = "blue") +
# Plot shape S
stat_function(fun = function(x) (sqrt(-(x^2) + 0.5^2)),  # D1
color = "blue") +
stat_function(fun = function(x) (sqrt(0.5^2 - (x-0.5)^2) + 0.5), # D2
color = "blue") +
stat_function(fun = function(x) x - 0.5, # D3
color = "blue") +
# Removing negative area
scale_x_continuous(limits = c(0, 1)) +
scale_y_continuous(limits = c(0, 1)) +
# Adds data points
geom_point(aes(points$x,  points$y),
col = ifelse(points$inside == TRUE, "darkturquoise", "lightpink"))
plot
}
usethis::use_testthat()
plot.area(estimate_area(B = 1000, seed = 10))
check()
library(testthat)
library(pkghw4g6)
check()
library(pkghw4g6)
library(testthat)
library(pkghw4g6)
library(devtools)
test_check("pkghw4g6")
devtools::check()
usethis::use_mit_license()
devtools::check()
usethis::use_package()
usethis::use_package(pkghw4g6)
usethis::use_package("stats", "Suggests")
usethis::use_package("stats", "Imports")
sethis::use_package("ggplot2", "Imports")
usethis::use_package("ggplot2", "Imports")
usethis::use_package("shiny", "Imports")
usethis::use_package("stats", "Suggests")
requireNamespace("stats", quietly = TRUE)
usethis::use_package("testthat", "Suggests")
devtools::check()
devtools::check()
devtools::check()
plot.area()
plot.area(estimate_area())
estimate_area(plot.area())
plot.area(estimate_area())
estimate_area()
devtools::check()
install.packages("testthat")
install.packages("testthat")
devtools::check()
devtools::check()
devtools::check()
plot.area()
plot(estimate_area())
estimate_area(B = 4367, seed = 10)
plot(estimate_area(B = 4367, seed = 10))
devtools::check()
devtools::check()
?sliderInput
install.packages(c("backports", "bayestestR", "blogdown", "broom", "car", "conquer", "corrplot", "cpp11", "crayon", "crosstalk", "dendextend", "DT", "fields", "flextable", "future", "gert", "git2r", "glue", "igraph", "labelled", "lmtest", "nloptr", "officer", "openair", "parallelly", "proxyC", "quanteda.textstats", "RcppArmadillo", "readr", "rio", "rsample", "servr", "sessioninfo", "slam", "sp", "spatstat.core", "terra", "tibble", "timetk", "tinytex", "tseries", "uuid", "vroom", "xfun"))
devtools::check()
system.time()
Sys.time()
system.time(estimate_area())
stop(
"Could not find example directory. Try re-installing pkghw4g6.",
call. = FALSE
)
install.packages("pkghw4g6")
install.packages("pkghw4g6")
shiny::runApp('inst/shiny-examples/area')
runApp('inst/shiny-examples/area')
# Compute area of shape
area_square <- 1*1
